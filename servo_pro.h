#ifndef __TRASH80_DYNAMIXEL_PROSERVO__
#define __TRASH80_DYNAMIXEL_PROSERVO__

#include "dynamixeldevice.h"

__TRASH80_DYNAMIXEL_NAMESPACE_BEGIN__
class ServoPro : public Device {
    public:
        typedef enum
        {
            MODEL_NUMBER = 0, //Model Number
            MODEL_INFORMATION = 2, //Model Information
            VERSION_OF_FIRMWARE = 6, //Information on the version of firmware
            ID = 7, //ID of Dynamixel
            BAUD_RATE = 8, //Baud Rate of Dynamixel
            RETURN_DELAY_TIME = 9, //Return Delay Time
            OPERATING_MODE = 11, //Operating mode
            HOMING_OFFSET = 13, //Homing offset
            MOVING_THRESHOLD = 17, //Moving threshold
            TEMPERATURE_LIMIT = 21, //Internal limit temperature
            MAX_VOLTAGE_LIMIT = 22, //Operating upper limit voltage
            MIN_VOLTAGE_LIMIT = 24, //Operating lower limit voltage
            ACCELERATION_LIMIT = 26, //acceleration Limit
            TORQUE_LIMIT = 30, //Torque limit
            VELOCITY_LIMIT = 32, //Velocity Limit
            MAX_POSITION_LIMIT = 36, //Position upper limit
            MIN_POSITION_LIMIT = 40, //Position lower limit
            EXTERNAL_PORT_MODE_1 = 44, //External Port Mode 1
            EXTERNAL_PORT_MODE_2 = 45, //External Port Mode 2
            EXTERNAL_PORT_MODE_3 = 46, //External Port Mode 3
            EXTERNAL_PORT_MODE_4 = 47, //External Port Mode 4
            SHUTDOWN = 48, //Shutdown
            TORQUE_ENABLE = 562, //Torque Enable on/off
            LED = 563, //LED intensity value
            LED_RED = 563, //RED LED intensity value
            LED_GREEN = 564, //GREEN LED intensity value
            LED_BLUE = 565, //BLUE LED intensity value
            VELOCITY_I_GAIN = 586, //Velocity I Gain
            VELOCITY_P_GAIN = 588, //Velocity P Gain
            POSITION_P_GAIN = 594, //Position P Gain
            GOAL_POSITION = 596, //Goal position
            GOAL_VELOCITY = 600, //Goal velocity
            GOAL_TORQUE = 604, //Goal Torque
            GOAL_ACCELERATION = 606, //Goal acceleration
            MOVING = 610, //Moving
            PRESENT_POSITION = 611, //Present position
            PRESENT_VELOCITY = 615, //Present velocity
            PRESENT_CURRENT = 621, //Present Current
            PRESENT_INPUT_VOLTAGE = 623, //Present input voltage
            PRESENT_TEMPERATURE = 625, //Present temperature
            EXTERNAL_PORT_DATA_1 = 626, //External Port Data 1
            EXTERNAL_PORT_DATA_2 = 628, //External Port Data 2
            EXTERNAL_PORT_DATA_3 = 630, //External Port Data 3
            EXTERNAL_PORT_DATA_4 = 632, //External Port Data 4
            REGISTERED_INSTRUCTION = 890, //Registered Instruction
            STATUS_RETURN_LEVEL = 891, //Status Return Level
            HARDWARE_ERROR_STATUS = 892, //Hardware error status
            INDIRECT_ADDRESS       = 49,
            INDIRECT_DATA          = 634
        } CONTROL_ADDRESS;

        // Generated by control_table.js
        uint16_t getModelNumber(){ return getValue((uint16_t)MODEL_NUMBER, 2); };
        uint32_t getModelInformation(){ return getValue((uint16_t)MODEL_INFORMATION, 4); };
        uint8_t getVersionOfFirmware(){ return getValue((uint16_t)VERSION_OF_FIRMWARE, 1); };
        uint8_t getId(){ return getValue((uint16_t)ID, 1); };
        uint8_t getBaudRate(){ return getValue((uint16_t)BAUD_RATE, 1); };
        uint8_t getReturnDelayTime(){ return getValue((uint16_t)RETURN_DELAY_TIME, 1); };
        uint8_t getOperatingMode(){ return getValue((uint16_t)OPERATING_MODE, 1); };
        uint32_t getHomingOffset(){ return getValue((uint16_t)HOMING_OFFSET, 4); };
        uint32_t getMovingThreshold(){ return getValue((uint16_t)MOVING_THRESHOLD, 4); };
        uint8_t getTemperatureLimit(){ return getValue((uint16_t)TEMPERATURE_LIMIT, 1); };
        uint16_t getMaxVoltageLimit(){ return getValue((uint16_t)MAX_VOLTAGE_LIMIT, 2); };
        uint16_t getMinVoltageLimit(){ return getValue((uint16_t)MIN_VOLTAGE_LIMIT, 2); };
        uint32_t getAccelerationLimit(){ return getValue((uint16_t)ACCELERATION_LIMIT, 4); };
        uint16_t getTorqueLimit(){ return getValue((uint16_t)TORQUE_LIMIT, 2); };
        uint32_t getVelocityLimit(){ return getValue((uint16_t)VELOCITY_LIMIT, 4); };
        uint32_t getMaxPositionLimit(){ return getValue((uint16_t)MAX_POSITION_LIMIT, 4); };
        uint32_t getMinPositionLimit(){ return getValue((uint16_t)MIN_POSITION_LIMIT, 4); };
        uint8_t getExternalPortMode1(){ return getValue((uint16_t)EXTERNAL_PORT_MODE_1, 1); };
        uint8_t getExternalPortMode2(){ return getValue((uint16_t)EXTERNAL_PORT_MODE_2, 1); };
        uint8_t getExternalPortMode3(){ return getValue((uint16_t)EXTERNAL_PORT_MODE_3, 1); };
        uint8_t getExternalPortMode4(){ return getValue((uint16_t)EXTERNAL_PORT_MODE_4, 1); };
        uint8_t getShutdown(){ return getValue((uint16_t)SHUTDOWN, 1); };
        uint8_t getTorqueEnable(){ return getValue((uint16_t)TORQUE_ENABLE, 1); };
        uint8_t getLed(){ return getValue((uint16_t)LED_RED, 1); };
        uint8_t getLedRed(){ return getValue((uint16_t)LED_RED, 1); };
        uint8_t getLedGreen(){ return getValue((uint16_t)LED_GREEN, 1); };
        uint8_t getLedBlue(){ return getValue((uint16_t)LED_BLUE, 1); };
        uint16_t getVelocityIGain(){ return getValue((uint16_t)VELOCITY_I_GAIN, 2); };
        uint16_t getVelocityPGain(){ return getValue((uint16_t)VELOCITY_P_GAIN, 2); };
        uint16_t getPositionPGain(){ return getValue((uint16_t)POSITION_P_GAIN, 2); };
        uint32_t getGoalPosition(){ return getValue((uint16_t)GOAL_POSITION, 4); };
        uint32_t getGoalVelocity(){ return getValue((uint16_t)GOAL_VELOCITY, 4); };
        uint16_t getGoalTorque(){ return getValue((uint16_t)GOAL_TORQUE, 2); };
        uint32_t getGoalAcceleration(){ return getValue((uint16_t)GOAL_ACCELERATION, 4); };
        uint8_t getMoving(){ return getValue((uint16_t)MOVING, 1); };
        uint32_t getPresentPosition(){ return getValue((uint16_t)PRESENT_POSITION, 4); };
        uint32_t getPresentVelocity(){ return getValue((uint16_t)PRESENT_VELOCITY, 4); };
        uint16_t getPresentCurrent(){ return getValue((uint16_t)PRESENT_CURRENT, 2); };
        uint16_t getPresentInputVoltage(){ return getValue((uint16_t)PRESENT_INPUT_VOLTAGE, 2); };
        uint8_t getPresentTemperature(){ return getValue((uint16_t)PRESENT_TEMPERATURE, 1); };
        uint16_t getExternalPortData1(){ return getValue((uint16_t)EXTERNAL_PORT_DATA_1, 2); };
        uint16_t getExternalPortData2(){ return getValue((uint16_t)EXTERNAL_PORT_DATA_2, 2); };
        uint16_t getExternalPortData3(){ return getValue((uint16_t)EXTERNAL_PORT_DATA_3, 2); };
        uint16_t getExternalPortData4(){ return getValue((uint16_t)EXTERNAL_PORT_DATA_4, 2); };

        bool setModelNumber(uint16_t value){ return setValue(MODEL_NUMBER, value); };
        bool setModelInformation(uint32_t value){ return setValue(MODEL_INFORMATION, value); };
        bool setVersionOfFirmware(uint8_t value){ return setValue(VERSION_OF_FIRMWARE, value); };
        bool setId(uint8_t value){ if(setValue(ID, value)) { id = value; return true;} return false; };
        bool setBaudRate(uint8_t value){ return setValue(BAUD_RATE, value); };
        bool setReturnDelayTime(uint8_t value){ return setValue(RETURN_DELAY_TIME, value); };
        bool setOperatingMode(uint8_t value){ return setValue(OPERATING_MODE, value); };
        bool setHomingOffset(uint32_t value){ return setValue(HOMING_OFFSET, value); };
        bool setMovingThreshold(uint32_t value){ return setValue(MOVING_THRESHOLD, value); };
        bool setTemperatureLimit(uint8_t value){ return setValue(TEMPERATURE_LIMIT, value); };
        bool setMaxVoltageLimit(uint16_t value){ return setValue(MAX_VOLTAGE_LIMIT, value); };
        bool setMinVoltageLimit(uint16_t value){ return setValue(MIN_VOLTAGE_LIMIT, value); };
        bool setAccelerationLimit(uint32_t value){ return setValue(ACCELERATION_LIMIT, value); };
        bool setTorqueLimit(uint16_t value){ return setValue(TORQUE_LIMIT, value); };
        bool setVelocityLimit(uint32_t value){ return setValue(VELOCITY_LIMIT, value); };
        bool setMaxPositionLimit(uint32_t value){ return setValue(MAX_POSITION_LIMIT, value); };
        bool setMinPositionLimit(uint32_t value){ return setValue(MIN_POSITION_LIMIT, value); };
        bool setExternalPortMode1(uint8_t value){ return setValue(EXTERNAL_PORT_MODE_1, value); };
        bool setExternalPortMode2(uint8_t value){ return setValue(EXTERNAL_PORT_MODE_2, value); };
        bool setExternalPortMode3(uint8_t value){ return setValue(EXTERNAL_PORT_MODE_3, value); };
        bool setExternalPortMode4(uint8_t value){ return setValue(EXTERNAL_PORT_MODE_4, value); };
        bool setShutdown(uint8_t value){ return setValue(SHUTDOWN, value); };
        bool setTorqueEnable(uint8_t value){ return setValue(TORQUE_ENABLE, value); };
        bool setLed(uint8_t value){ return setValue(LED_RED, (uint8_t) (value > 0 ? 255 : 0)); };
        bool setLedRed(uint8_t value){ return setValue(LED_RED, value); };
        bool setLedGreen(uint8_t value){ return setValue(LED_GREEN, value); };
        bool setLedBlue(uint8_t value){ return setValue(LED_BLUE, value); };
        bool setVelocityIGain(uint16_t value){ return setValue(VELOCITY_I_GAIN, value); };
        bool setVelocityPGain(uint16_t value){ return setValue(VELOCITY_P_GAIN, value); };
        bool setPositionPGain(uint16_t value){ return setValue(POSITION_P_GAIN, value); };
        bool setGoalPosition(uint32_t value){ return setValue(GOAL_POSITION, value); };
        bool setGoalVelocity(uint32_t value){ return setValue(GOAL_VELOCITY, value); };
        bool setGoalTorque(uint16_t value){ return setValue(GOAL_TORQUE, value); };
        bool setGoalAcceleration(uint32_t value){ return setValue(GOAL_ACCELERATION, value); };
        bool setMoving(uint8_t value){ return setValue(MOVING, value); };
        bool setPresentPosition(uint32_t value){ return setValue(PRESENT_POSITION, value); };
        bool setPresentVelocity(uint32_t value){ return setValue(PRESENT_VELOCITY, value); };
        bool setPresentCurrent(uint16_t value){ return setValue(PRESENT_CURRENT, value); };
        bool setPresentInputVoltage(uint16_t value){ return setValue(PRESENT_INPUT_VOLTAGE, value); };
        bool setPresentTemperature(uint8_t value){ return setValue(PRESENT_TEMPERATURE, value); };
        bool setExternalPortData1(uint16_t value){ return setValue(EXTERNAL_PORT_DATA_1, value); };
        bool setExternalPortData2(uint16_t value){ return setValue(EXTERNAL_PORT_DATA_2, value); };
        bool setExternalPortData3(uint16_t value){ return setValue(EXTERNAL_PORT_DATA_3, value); };
        bool setExternalPortData4(uint16_t value){ return setValue(EXTERNAL_PORT_DATA_4, value); };

        static const uint8_t addressSize(uint16_t address) {
            address = address & 255;
            if(address > 146) return 0;
            // Generated by control_table.js
            static const uint8_t memory_map[147] = {
                2,0,4,0,0,0,1,1,1,1,0,1,0,4,0,0,0,4,0,0,0,1,2,0,2,0,4,0,0,0,2,0,4,0,0,0,4,0,0,0,4,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,2,0,4,0,0,0,4,0,0,0,2,0,4,0,0,0,1,4,0,0,0,4,0,0,0,0,0,2,0,2,0,1,2,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
            };
            return memory_map[address];
        }
};
__TRASH80_DYNAMIXEL_NAMESPACE_END__

#endif
