var protocol_properties = {
    MODEL_NUMBER : 0, //Model Number
    MODEL_INFORMATION : 2, //Model Information
    VERSION_OF_FIRMWARE : 6, //Firmware Version
    ID : 7, //Dynamixel ID
    BAUD_RATE : 8, //Communication Baud Rate
    RETURN_DELAY_TIME : 9, //Response Delay Time
    DRIVE_MODE : 10, //Drive Mode
    OPERATING_MODE : 11, //Operating Mode
    SECONDARY_ID : 12, //Secondary(Shadow) ID
    PROTOCOL_VERSION : 13, //Protocol Version
    HOMING_OFFSET : 20, //Home Position Offset
    MOVING_THRESHOLD : 24, //Velocity Threshold for Movement Detection
    TEMPERATURE_LIMIT : 31, //Maximum Internal Temperature Limit
    MAX_VOLTAGE_LIMIT : 32, //Maximum Voltage Limit
    MIN_VOLTAGE_LIMIT : 34, //Minimum Voltage Limit
    PWM_LIMIT : 36, //Maximum PWM Limit
    CURRENT_LIMIT : 38, //Maximum Current Limit
    ACCELERATION_LIMIT : 40, //Maximum Acceleration Limit
    VELOCITY_LIMIT : 44, //Maximum Velocity Limit
    MAX_POSITION_LIMIT : 48, //Maximum Position Limit
    MIN_POSITION_LIMIT : 52, //Minimum Position Limit
    SHUTDOWN : 63, //Shutdown Dynamixel
    TORQUE_ENABLE : 64, //Motor Torque On/Off
    LED : 65, //Status LED On/Off
    STATUS_RETURN_LEVEL : 68, //Select Types of Status Return
    REGISTERED_INSTRUCTION : 69, //Check Reception of Instruction
    HARDWARE_ERROR_STATUS : 70, //Hardware Error Status
    VELOCITY_I_GAIN : 76, //I Gain of Velocity
    VELOCITY_P_GAIN : 78, //P Gain of Velocity
    POSITION_D_GAIN : 80, //D Gain of Position
    POSITION_I_GAIN : 82, //I Gain of Position
    POSITION_P_GAIN : 84, //P Gain of Position
    FEEDFORWARD_2ND_GAIN : 88, //2nd Gain of Feed-Forward
    FEEDFORWARD_1ST_GAIN : 90, //1st Gain of Feed-Forward
    BUS_WATCHDOG : 98, //Dynamixel Bus Watchdog
    GOAL_PWM : 100, //Target PWM Value
    GOAL_CURRENT : 102, //Target Current Value
    GOAL_VELOCITY : 104, //Target Velocity Value
    PROFILE_ACCELERATION : 108, //Acceleration Value of Profile
    PROFILE_VELOCITY : 112, //Velocity Value of Profile
    GOAL_POSITION : 116, //Target Position Value
    REALTIME_TICK : 120, //Count Time in millisecond
    MOVING : 122, //Movement Status
    MOVING_STATUS : 123, //Detailed Information of Movement Status
    PRESENT_PWM : 124, //Current PWM Value
    PRESENT_CURRENT : 126, //Current Current Value
    PRESENT_VELOCITY : 128, //Current Velocity Value
    PRESENT_POSITION : 132, //Current Position Value
    VELOCITY_TRAJECTORY : 136, //Target Velocity Trajectory Generated by Profile
    POSITION_TRAJECTORY : 140, //Target Position Trajectory Generated by Profile
    PRESENT_INPUT_VOLTAGE : 144, //Current Input Voltage
    PRESENT_TEMPERATURE : 146 //Current Internal Temperature
};

var protocol_sizes = {
    MODEL_NUMBER : 2, //Model Number
    MODEL_INFORMATION : 4, //Model Information
    VERSION_OF_FIRMWARE : 1, //Firmware Version
    ID : 1, //Dynamixel ID
    BAUD_RATE : 1, //Communication Baud Rate
    RETURN_DELAY_TIME : 1, //Response Delay Time
    DRIVE_MODE : 1, //Drive Mode
    OPERATING_MODE : 1, //Operating Mode
    SECONDARY_ID : 1, //Secondary(Shadow) ID
    PROTOCOL_VERSION : 1, //Protocol Version
    HOMING_OFFSET : 4, //Home Position Offset
    MOVING_THRESHOLD : 4, //Velocity Threshold for Movement Detection
    TEMPERATURE_LIMIT : 1, //Maximum Internal Temperature Limit
    MAX_VOLTAGE_LIMIT : 2, //Maximum Voltage Limit
    MIN_VOLTAGE_LIMIT : 2, //Minimum Voltage Limit
    PWM_LIMIT : 2, //Maximum PWM Limit
    CURRENT_LIMIT : 2, //Maximum Current Limit
    ACCELERATION_LIMIT : 4, //Maximum Acceleration Limit
    VELOCITY_LIMIT : 4, //Maximum Velocity Limit
    MAX_POSITION_LIMIT : 4, //Maximum Position Limit
    MIN_POSITION_LIMIT : 4, //Minimum Position Limit
    SHUTDOWN : 1, //Shutdown Dynamixel
    TORQUE_ENABLE : 1, //Motor Torque On/Off
    LED : 1, //Status LED On/Off
    STATUS_RETURN_LEVEL : 1, //Select Types of Status Return
    REGISTERED_INSTRUCTION : 1, //Check Reception of Instruction
    HARDWARE_ERROR_STATUS : 1, //Hardware Error Status
    VELOCITY_I_GAIN : 2, //I Gain of Velocity
    VELOCITY_P_GAIN : 2, //P Gain of Velocity
    POSITION_D_GAIN : 2, //D Gain of Position
    POSITION_I_GAIN : 2, //I Gain of Position
    POSITION_P_GAIN : 2, //P Gain of Position
    FEEDFORWARD_2ND_GAIN : 2, //2nd Gain of Feed-Forward
    FEEDFORWARD_1ST_GAIN : 2, //1st Gain of Feed-Forward
    BUS_WATCHDOG : 1, //Dynamixel Bus Watchdog
    GOAL_PWM : 2, //Target PWM Value
    GOAL_CURRENT : 2, //Target Current Value
    GOAL_VELOCITY : 4, //Target Velocity Value
    PROFILE_ACCELERATION : 4, //Acceleration Value of Profile
    PROFILE_VELOCITY : 4, //Velocity Value of Profile
    GOAL_POSITION : 4, //Target Position Value
    REALTIME_TICK : 2, //Count Time in millisecond
    MOVING : 1, //Movement Status
    MOVING_STATUS : 1, //Detailed Information of Movement Status
    PRESENT_PWM : 2, //Current PWM Value
    PRESENT_CURRENT : 2, //Current Current Value
    PRESENT_VELOCITY : 4, //Current Velocity Value
    PRESENT_POSITION : 4, //Current Position Value
    VELOCITY_TRAJECTORY : 4, //Target Velocity Trajectory Generated by Profile
    POSITION_TRAJECTORY : 4, //Target Position Trajectory Generated by Profile
    PRESENT_INPUT_VOLTAGE : 2, //Current Input Voltage
    PRESENT_TEMPERATURE : 1 //Current Internal Temperature
};

function createRoutes()
{
    var output = "// Generated by scripts/osc_control.js\n";
    sizes = ['','8','16','','32'];
    getter = '';
    setter = '';
    console.log('okay');
    console.log(protocol_properties);
    for (var key in protocol_properties) {
        if (!protocol_properties.hasOwnProperty(key)) continue;
        var f = key.replace(/_/g,' ').replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();}).replace(/ /g,'');
        var p = key.toLowerCase();
        getter += "  } else if( msg.match(\"/"+p+"\", addrOffset) ) {\n    bndl.add((char *)\"/servo/response/"+p+"\").add(msg.getInt(0)).add((int32_t) d->get"+f+"());\n";
        setter += "  } else if( msg.match(\"/"+p+"\", addrOffset) ) {\n    success = d->set"+f+"((uint"+sizes[protocol_sizes[key]]+"_t) value);\n";

    }
    output = output+getter+"\n\n\n\n"+setter;
    copy(output);
    console.log("Output copied to clipboard.");
    return output;
}
